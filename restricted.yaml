---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
    name: restricted
    annotations:
      seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
      seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
    privileged: true
    # Required to prevent escalations to root.
    allowPrivilegeEscalation: true
    # This is redundant with non-root + disallow privilege escalation,
    # but we can provide it for defense in depth.
    #- requiredDropCapabilities:
    #- - ALL
    # defaultAddCapabilities:
    # - NET_BIND_SERVICE
    allowedCapabilities:
    # - NET_ADMIN
    - NET_BIND_SERVICE
    # Allow core volume types.
    volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
    - 'awsElasticBlockStore'
    hostNetwork: false
    hostIPC: false
    hostPID: false
    hostPorts:
      - min: 1025
        max: 65535
    runAsUser:
      # Require the container to run without root privileges.
      # rule: 'MustRunAsNonRoot'
      rule: 'RunAsAny'
    seLinux:
      # This policy assumes the nodes are using AppArmor rather than SELinux.
      rule: 'RunAsAny'
    supplementalGroups:
      # rule: 'RunAsAny'
      rule: 'MustRunAs'
      ranges:
        # Forbid adding the root group.
        - min: 100
          max: 65535
    fsGroup:
      # rule: 'RunAsAny'
      rule: 'MustRunAs'
      ranges:
        # Forbid adding the root group.
        - min: 100
          max: 65535
    readOnlyRootFilesystem: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eks:podsecuritypolicy:restricted
  labels:
    kubernetes.io/cluster-service: "true"
    eks.amazonaws.com/component: pod-security-policy
rules:
- apiGroups:
  - policy
  resourceNames:
  - restricted
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eks:podsecuritypolicy:restricted
  annotations:
    kubernetes.io/description: 'Allow to create restricted pods.'
  labels:
    kubernetes.io/cluster-service: "true"
    eks.amazonaws.com/component: pod-security-policy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eks:podsecuritypolicy:restricted
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: system:serviceaccounts
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: system:authenticated